import os
import requests
import uuid
import pymongo
from groq import Groq


class GroqBot:
    def __init__(self, mongodb_client, notifier):
        self.messages = None
        self.client = Groq(api_key=os.environ.get("GROQ_API_KEY"))
        self.notifier = notifier
        self.mongo_client = mongodb_client
        self.db = self.mongo_client[os.environ.get("MONGO_DB")]
        self.collection = self.db[os.environ.get("CHAT_LOGS_COLLECTION")]
        self.report_id = None
        self.report_details = {}
        self.reset_chat()

    def reset_chat(self):
        self.report_id = str(uuid.uuid4())  # Assign a unique report ID for each request
        self.messages = [
            {"role": "system",
             "content": """
             We have few reports indexed in vectorDB and we are not able to provide relevant 
             reports based on user query. 
             You are an interactive assistant that collects report requirements from the user 
             step by step. Ask relevant follow-up questions to gather complete information/requirements before summarizing the report requirements draft. Do not ask more than 5 questions.
             """}
        ]

    def get_groq_response(self, bot_question, user_input, persist = True):
        self.messages.append({"role": "user", "content": f"User provided: {user_input}. Ask a relevant follow-up question."})
        response = self.client.chat.completions.create(
            model=os.environ.get("GROQ_MODEL"),
            messages=self.messages
        )
        reply = response.choices[0].message.content.strip()
        self.messages.append({"role": "assistant", "content": reply})
        if persist:
            self.store_interaction(bot_question, user_input)
        return reply

    def store_interaction(self, bot_question, user_input):
        self.collection.insert_one({
            "report_id": self.report_id,
            "bot_question": bot_question,
            "user_input": user_input,
        })

    def collect_report_details(self):
        self.reset_chat()
        initial_question = "What details do you want to provide about the report?"
        next_question = initial_question
        question_count = 0

        while question_count < int(os.getenv("GROQ_MAX_QUESTIONS")):
            user_input = input(next_question + " ")
            if user_input.lower() in ["exit", "quit", "done"]:
                break

            self.messages.append({"role": "user", "content": user_input})
            self.report_details[f"question_{question_count + 1}"] = user_input
            response = self.get_groq_response(next_question, user_input)

            if response.lower() in ["end", "no more questions"]:
                break

            next_question = response
            question_count += 1

    def confirm_and_summarize(self):
        summary_request = "Summarize the provided report details and don't include any further questions in this one"
        summary = self.get_groq_response("Shall I summarize the report", summary_request, False)
        self.report_details["summary"] = summary
        print("AI Summary:", summary)
        self.send_to_slack(summary)

    def send_to_slack(self, summary):
        payload = {
            "text": f"Report Request and Groq bot summarization\nReport ID: {self.report_id}\nReport Summary generated by groqbot:\n{summary}"}
        self.notifier.send_notification(payload)
